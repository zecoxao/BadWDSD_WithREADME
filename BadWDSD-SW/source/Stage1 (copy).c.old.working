// -O0 -Wall -mcpu=cell -ffreestanding -mno-toc

typedef char int8_t;
typedef unsigned char uint8_t;

typedef short int16_t;
typedef unsigned short uint16_t;

typedef int int32_t;
typedef unsigned int uint32_t;

typedef long int64_t;
typedef unsigned long uint64_t;

#define NULL 0

#define eieio()                \
    {                          \
        asm volatile("eieio"); \
        asm volatile("sync");  \
    }

// timebase = 79800000

// #define MUL_NS 1000000000
// #define MUL_US 1000000
// #define MUL_MS 1000

#define SYS_TIMEBASE_GET(tb)                          \
    do                                                \
    {                                                 \
        __asm__ volatile("1: mftb %[current_tb];"     \
                         "cmpwi 7, %[current_tb], 0;" \
                         "beq-  7, 1b;"               \
                         : [current_tb] "=r"(tb) :    \
                         : "cr7");                    \
    } while (0)

__attribute__((always_inline)) static inline uint64_t GetTimeInNs()
{
    uint64_t my_timebase = 79800000;
    uint64_t MUL_NS = 1000000000;

    uint64_t cur_tb_ns;
    SYS_TIMEBASE_GET(cur_tb_ns);

    cur_tb_ns *= MUL_NS;

    return (cur_tb_ns / my_timebase);
}

__attribute__((always_inline)) static inline void WaitInNs(uint64_t ns)
{
    uint64_t start = GetTimeInNs();
    uint64_t end = start + ns;

    while (1)
    {
        uint64_t cur = GetTimeInNs();

        if (cur >= end)
            return;
    }
}

__attribute__((always_inline)) static inline uint64_t GetTimeInUs()
{
    uint64_t my_timebase = 79800000;
    uint64_t MUL_US = 1000000;

    uint64_t cur_tb_us;
    SYS_TIMEBASE_GET(cur_tb_us);

    cur_tb_us *= MUL_US;

    return (cur_tb_us / my_timebase);
}

__attribute__((always_inline)) static inline void WaitInUs(uint64_t us)
{
    uint64_t start = GetTimeInUs();
    uint64_t end = start + us;

    while (1)
    {
        uint64_t cur = GetTimeInUs();

        if (cur >= end)
            return;
    }
}

__attribute__((always_inline)) static inline uint64_t GetTimeInMs()
{
    uint64_t my_timebase = 79800000;
    uint64_t MUL_MS = 1000;

    uint64_t cur_tb_ms;
    SYS_TIMEBASE_GET(cur_tb_ms);

    cur_tb_ms *= MUL_MS;

    return (cur_tb_ms / my_timebase);
}

__attribute__((always_inline)) static inline void WaitInMs(uint64_t ms)
{
    uint64_t start = GetTimeInMs();
    uint64_t end = start + ms;

    while (1)
    {
        uint64_t cur = GetTimeInMs();

        if (cur >= end)
            return;
    }
}

__attribute__((always_inline)) static inline void memset(void *buf, uint8_t v, uint64_t count)
{
    uint8_t *buff = (uint8_t *)buf;

    for (uint64_t i = 0; i < count; ++i)
        buff[i] = v;
}

__attribute__((always_inline)) static inline void memcpy(void *dest, const void *src, uint64_t count)
{
    uint8_t *destt = (uint8_t *)dest;
    const uint8_t *srcc = (const uint8_t *)src;

    for (uint64_t i = 0; i < count; ++i)
        destt[i] = srcc[i];
}

__attribute__((always_inline)) static inline void dead()
{
    while (1)
    {
    }
}

struct func_call_params_s
{
    uint64_t addr;

    uint64_t args[8];
    uint64_t out[8];
};

__attribute__((always_inline)) static inline void func_call(struct func_call_params_s *params)
{
    uint64_t lr;
    asm volatile("mflr %0" : "=r"(lr)::);

    uint64_t ctr;
    asm volatile("mfctr %0" : "=r"(ctr)::);

    asm volatile("mr 3, %0" ::"r"(params->args[0]) :);
    asm volatile("mr 4, %0" ::"r"(params->args[1]) :);
    asm volatile("mr 5, %0" ::"r"(params->args[2]) :);
    asm volatile("mr 6, %0" ::"r"(params->args[3]) :);
    asm volatile("mr 7, %0" ::"r"(params->args[4]) :);
    asm volatile("mr 8, %0" ::"r"(params->args[5]) :);
    asm volatile("mr 9, %0" ::"r"(params->args[6]) :);
    asm volatile("mr 10, %0" ::"r"(params->args[7]) :);

    asm volatile("mtctr %0" ::"r"(params->addr) :);

    asm volatile("addi 1, 1, -16");
    asm volatile("bctrl");
    asm volatile("addi 1, 1, 16");

    asm volatile("mr %0, 10" : "=r"(params->out[7])::);
    asm volatile("mr %0, 9" : "=r"(params->out[6])::);
    asm volatile("mr %0, 8" : "=r"(params->out[5])::);
    asm volatile("mr %0, 7" : "=r"(params->out[4])::);
    asm volatile("mr %0, 6" : "=r"(params->out[3])::);
    asm volatile("mr %0, 5" : "=r"(params->out[2])::);
    asm volatile("mr %0, 4" : "=r"(params->out[1])::);
    asm volatile("mr %0, 3" : "=r"(params->out[0])::);

    asm volatile("mtctr %0" ::"r"(ctr) :);

    asm volatile("mtlr %0" ::"r"(lr) :);
}

__attribute__((always_inline)) static inline void puts(const char *str)
{
    struct func_call_params_s params;
    params.addr = 0x2BA460; // lv1_puts
    params.args[0] = (uint64_t)str;

    func_call(&params);
}

struct sc_packet_s
{
    uint8_t service_id;
    uint32_t communication_tag;
    uint16_t payload_size;

    uint8_t data[64];
};

struct sc_real_packet_header_s
{
    uint8_t service_id;
    uint8_t version;
    uint16_t tag;
    uint8_t res[2];
    uint16_t cksum;
    uint32_t communication_tag;
    uint16_t payload_size[2];
};

__attribute__((always_inline)) static inline uint16_t sc_real_packet_header_calc_cksum(struct sc_real_packet_header_s *pkt_hdr)
{
    uint8_t *ptr;
    uint32_t sum;

    ptr = (uint8_t *)pkt_hdr;
    sum = 0;

    for (int32_t i = 0; i < 6; i++)
        sum += *ptr++;

    sum += 0x8000;

    return sum & 0xffff;
}

__attribute__((always_inline)) static inline void intr_disable()
{
    //li      %r0, 2
    //mtmsrd  %r0, 1

    asm volatile("li 0, 2");
    asm volatile("mtmsrd 0, 1");

    eieio();
}

__attribute__((always_inline)) static inline void intr_enable()
{
    //li  %r0, 0
    //ori %r0, %r0, 0x8002
    //eieio
    //sync
    //mtmsrd  %r0, 1

    asm volatile("li 0, 0");
    asm volatile("ori 0, 0, 0x8002");
    eieio();

    asm volatile("mtmsrd 0, 1");
}

__attribute__((always_inline)) static inline void sc_send_packet(const struct sc_packet_s *in, struct sc_packet_s *out)
{
    if (in->payload_size > 64)
    {
        // printf("payload too big!\n");
        dead();
    }

    intr_disable();

    char strbuf[3];
    strbuf[0] = 'z';
    strbuf[1] = '\n';
    strbuf[2] = 0;

    // puts(strbuf);

    // 0x24000000000
    uint64_t sb_base_addr = 0x24;
    sb_base_addr <<= 36;

    //
    uint64_t send_packet_counter_addr[4];

    // cell
    // 0x2400008DFF0
    send_packet_counter_addr[0] = sb_base_addr;
    send_packet_counter_addr[0] |= 0x8DFF0;

    // 0x2400008DFF2
    send_packet_counter_addr[1] = sb_base_addr;
    send_packet_counter_addr[1] |= 0x8DFF2;

    // sc
    // 0x2400008CFF4
    send_packet_counter_addr[2] = sb_base_addr;
    send_packet_counter_addr[2] |= 0x8CFF4;

    // 0x2400008CFF6
    send_packet_counter_addr[3] = sb_base_addr;
    send_packet_counter_addr[3] |= 0x8CFF6;

    // 0x2400008D000
    uint64_t send_packet_data_addr = sb_base_addr;
    send_packet_data_addr |= 0x8D000;

    // 0x2400008E100
    uint64_t send_packet_kick_addr = sb_base_addr;
    send_packet_kick_addr |= 0x8E100;

    //
    uint64_t recieve_packet_counter_addr[2];

    // sc
    // 0x2400008DFF4
    recieve_packet_counter_addr[0] = sb_base_addr;
    recieve_packet_counter_addr[0] |= 0x8DFF4;

    // 0x2400008DFF6
    recieve_packet_counter_addr[1] = sb_base_addr;
    recieve_packet_counter_addr[1] |= 0x8DFF6;

    // 0x2400008C000
    uint64_t recieve_packet_data_addr = sb_base_addr;
    recieve_packet_data_addr |= 0x8C000;

    //

    while (1)
    {

        uint16_t send_packet_counter[2];

        // puts(strbuf);

        send_packet_counter[0] = *((uint16_t *)send_packet_counter_addr[0]);
        send_packet_counter[1] = *((uint16_t *)send_packet_counter_addr[1]);

        while (1)
        {
            if ((*((uint16_t *)send_packet_counter_addr[2]) + 1) != send_packet_counter[0])
                break;
        }

        uint16_t tag = send_packet_counter[0];

        struct sc_real_packet_header_s in_real_pkt_hdr;

        in_real_pkt_hdr.service_id = in->service_id;
        in_real_pkt_hdr.version = 1;

        in_real_pkt_hdr.tag = tag;

        in_real_pkt_hdr.res[0] = 0;
        in_real_pkt_hdr.res[1] = 0;

        in_real_pkt_hdr.cksum = sc_real_packet_header_calc_cksum(&in_real_pkt_hdr);

        in_real_pkt_hdr.communication_tag = in->communication_tag;

        in_real_pkt_hdr.payload_size[0] = in->payload_size;
        in_real_pkt_hdr.payload_size[1] = in->payload_size;

        {
            uint8_t buf[256];
            memset(buf, 0, 256);

#if 0

            uint64_t curSize = 0;

            memcpy(&buf[curSize], &in_real_pkt_hdr, sizeof(struct sc_real_packet_header_s));
            curSize += sizeof(struct sc_real_packet_header_s);

            uint64_t payload_size = in_real_pkt_hdr.payload_size[0];

            memcpy(&buf[curSize], &in->data[0], payload_size);
            curSize += payload_size;

            // padding...

            uint64_t align = 4;
            uint64_t zz = (payload_size % align);

            if (zz != 0)
            {
                uint64_t y = (align - zz);

                memset(&buf[curSize], 0, y);
                curSize += y;
            }

            // cksum...

            uint32_t cksum = 0;

            for (int32_t i = 0; i < curSize; i++)
                cksum -= buf[i];

            cksum = cksum & 0xffff;

            memcpy(&buf[curSize], &cksum, sizeof(uint32_t));
            curSize += sizeof(uint32_t);

            // printf("curSize = %lu, cksum = %08x\n", curSize, cksum);

            // lv2_write(ctx->sc_ea_addr + ctx->sc_send_packet_data_offset, curSize, &buf[0]);
            memcpy((void *)send_packet_data_addr, &buf[0], curSize);

#else

            {
                // 16011620 0000804d 00000001 00080008 20290a00 000001b6 0000fdcb

                uint32_t data[7];

                data[0] = 0x16011620;
                data[1] = 0x0000804d;
                data[2] = 0x00000001;
                data[3] = 0x00080008;
                data[4] = 0x20290a00;
                data[5] = 0x000001b6;
                data[6] = 0x0000fdcb;

                volatile uint32_t *dest = (volatile uint32_t *)send_packet_data_addr;

                for (uint32_t i = 0; i < 7; i++)
                {
                    while (dest[i] != data[i])
                    {
                        dest[i] = data[i];
                        eieio();
                    }
                }
            }

#endif
        }

        // puts(strbuf);

        ++send_packet_counter[0];
        ++send_packet_counter[1];

        *((uint16_t *)send_packet_counter_addr[0]) = send_packet_counter[0];
        *((uint16_t *)send_packet_counter_addr[1]) = send_packet_counter[1];

        uint16_t recieve_packet_counter[2];

        recieve_packet_counter[0] = *((uint16_t *)recieve_packet_counter_addr[0]);
        recieve_packet_counter[1] = *((uint16_t *)recieve_packet_counter_addr[1]);

        eieio();

        uint32_t kick = 0x1;
        *((uint32_t *)send_packet_kick_addr) = kick;

        eieio();

        intr_enable();

        uint16_t new_recieve_packet_counter[2];

        while (1)
        {
            new_recieve_packet_counter[0] = *((uint16_t *)recieve_packet_counter_addr[0]);
            new_recieve_packet_counter[1] = *((uint16_t *)recieve_packet_counter_addr[1]);

            // puts(strbuf);

            if (new_recieve_packet_counter[0] == (recieve_packet_counter[0] + 1) && new_recieve_packet_counter[1] == (recieve_packet_counter[1] + 1))
                break;
        }

        puts(strbuf);

        struct sc_real_packet_header_s out_real_pkt_hdr;
        memcpy(&out_real_pkt_hdr, (void *)recieve_packet_data_addr, sizeof(struct sc_real_packet_header_s));

        if (out_real_pkt_hdr.tag != tag)
        {
            // printf("out pkt tag mismatch!\n");
            puts(strbuf);
            // continue;

            dead();
        }

        if (out != NULL)
        {
            out->service_id = out_real_pkt_hdr.service_id;
            out->communication_tag = out_real_pkt_hdr.communication_tag;

            out->payload_size = out_real_pkt_hdr.payload_size[0];

            memcpy(&out->data[0], (void *)recieve_packet_data_addr + sizeof(struct sc_real_packet_header_s), out->payload_size);
        }

        break;
    }
}

__attribute__((noinline, section("BadWDSD_Stage1_Test_Do_Section"))) void BadWDSD_Stage1_Test_Do()
{
    // asm volatile ( "li 0, %0\n"
    //: /* Output registers */
    //:"r"(value) /* Input registers */
    //: /* No clobbered registers */
    //);

    // set stack pointer to 0x7000
    // asm volatile ("li 1, 0x7000"); // should shift more...

    // 0x2401F000000
    // asm volatile ("li 3, 0x2401");
    // asm volatile ("sld 3, 3, 24");

    // asm volatile ("mtctr 3");
    // asm volatile ("bctrl");

    // lv1_puts = 0x2BA460
    // lv1_printf = 0x298284

#if 0

    {
        char str[8] = {};

        str[0] = 'f';
        str[1] = 'u';
        str[2] = 'c';
        str[3] = 'k';
        str[4] = '\n';
        str[5] = 0;

        puts(str);
    }

#endif

    WaitInMs(5000);

    {
        char str[8] = {};

        str[0] = 'k';
        str[1] = 'u';
        str[2] = 'c';
        str[3] = 'k';
        str[4] = '\n';
        str[5] = 0;

        puts(str);

        struct sc_packet_s pkt;
        struct sc_packet_s pktout;

        pkt.service_id = 0x16;
        pkt.communication_tag = 0;

        pkt.payload_size = 8;

        pkt.data[0] = 0x20;
        pkt.data[1] = 0x29;
        pkt.data[2] = 0x0a;
        pkt.data[3] = 0x00;

        pkt.data[4] = 0x00;
        pkt.data[5] = 0x00;

        pkt.data[6] = 0x01;
        pkt.data[7] = 0xb6;

        sc_send_packet(&pkt, &pktout);
    }

    WaitInMs(5000);

    // uint64_t result = *((uint64_t *)0x100);

    // asm volatile("mr 3, %0" ::"r"(result) :);
}